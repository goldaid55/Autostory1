import inquirer from 'inquirer';
import chalk from 'chalk';
import { readFileSync, readdirSync } from 'fs';
import path from 'path';

export class UI {
  constructor(accountManager, storyManager) {
    this.accountManager = accountManager;
    this.storyManager = storyManager;
  }

  async start() {
    console.log(chalk.blue('üöÄ Telegram Story Bot'));
    
    while (true) {
      const { action } = await inquirer.prompt([
        {
          type: 'list',
          name: 'action',
          message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
          choices: [
            { name: 'üì± –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏', value: 'accounts' },
            { name: 'üì∏ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é', value: 'story' },
            { name: 'üìÖ –û—Ç–ª–æ–∂–µ–Ω–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è', value: 'scheduled' },
            { name: 'üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π', value: 'mentions' },
            { name: 'üîÑ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏', value: 'proxy' },
            { name: '‚ùå –í—ã—Ö–æ–¥', value: 'exit' }
          ]
        }
      ]);

      if (action === 'exit') break;

      switch (action) {
        case 'accounts':
          await this.accountsMenu();
          break;
        case 'story':
          await this.storyMenu();
          break;
        case 'scheduled':
          await this.scheduledMenu();
          break;
        case 'mentions':
          await this.mentionsMenu();
          break;
        case 'proxy':
          await this.proxyMenu();
          break;
      }
    }
  }

  async accountsMenu() {
    const { action } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏:',
        choices: [
          { name: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç', value: 'add' },
          { name: 'üìã –°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤', value: 'list' },
          { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
        ]
      }
    ]);

    if (action === 'back') return;

    if (action === 'add') {
      const { phone } = await inquirer.prompt([
        {
          type: 'input',
          name: 'phone',
          message: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ):',
          validate: input => input.length > 0
        }
      ]);

      try {
        await this.accountManager.addAccount(phone, process.env.API_ID, process.env.API_HASH);
        console.log(chalk.green('‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!'));
      } catch (err) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞:', err.message));
      }
    }

    if (action === 'list') {
      const accounts = this.accountManager.getAccounts();
      if (accounts.length === 0) {
        console.log(chalk.yellow('‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤'));
      } else {
        console.log(chalk.blue('\n–°–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤:'));
        accounts.forEach((acc, i) => {
          console.log(chalk.white(`${i + 1}. ${acc.phone}`));
        });
      }
    }
  }

  async storyMenu() {
    const accounts = this.accountManager.getAccounts();
    if (accounts.length === 0) {
      console.log(chalk.red('‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!'));
      return;
    }

    const { account, mediaPath, caption, mentionsFile, link, privacy } = await inquirer.prompt([
      {
        type: 'list',
        name: 'account',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:',
        choices: accounts.map(acc => ({ name: acc.phone, value: acc }))
      },
      {
        type: 'input',
        name: 'mediaPath',
        message: '–ü—É—Ç—å –∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª—É:'
      },
      {
        type: 'input',
        name: 'caption',
        message: '–ü–æ–¥–ø–∏—Å—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      },
      {
        type: 'input',
        name: 'mentionsFile',
        message: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      },
      {
        type: 'input',
        name: 'link',
        message: '–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      },
      {
        type: 'list',
        name: 'privacy',
        message: '–ö—Ç–æ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é:',
        choices: [
          { name: '–í—Å–µ', value: 'all' },
          { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', value: 'contacts' },
          { name: '–ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è', value: 'close_friends' },
          { name: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value: 'selected' }
        ]
      }
    ]);

    try {
      const mentions = mentionsFile ? 
        await this.storyManager.loadMentionsList(mentionsFile) : [];

      await this.storyManager.postStory({
        account,
        mediaPath,
        caption,
        mentions,
        link,
        privacy
      });
      console.log(chalk.green('‚úÖ –ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!'));
    } catch (err) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:', err.message));
    }
  }

  async scheduledMenu() {
    const accounts = this.accountManager.getAccounts();
    if (accounts.length === 0) {
      console.log(chalk.red('‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç!'));
      return;
    }

    const { account, mediaFolder, interval, startTime, privacy, caption, mentionsFile, link } = await inquirer.prompt([
      {
        type: 'list',
        name: 'account',
        message: '–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:',
        choices: accounts.map(acc => ({ name: acc.phone, value: acc }))
      },
      {
        type: 'input',
        name: 'mediaFolder',
        message: '–ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏:',
        validate: input => input.length > 0
      },
      {
        type: 'number',
        name: 'interval',
        message: '–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):',
        default: 5,
        validate: input => input > 0
      },
      {
        type: 'input',
        name: 'startTime',
        message: '–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π (HH:MM):',
        default: new Date().toTimeString().slice(0, 5),
        validate: input => /^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$/.test(input)
      },
      {
        type: 'list',
        name: 'privacy',
        message: '–ö—Ç–æ –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å –∏—Å—Ç–æ—Ä–∏–∏:',
        choices: [
          { name: '–í—Å–µ', value: 'all' },
          { name: '–ö–æ–Ω—Ç–∞–∫—Ç—ã', value: 'contacts' },
          { name: '–ë–ª–∏–∑–∫–∏–µ –¥—Ä—É–∑—å—è', value: 'close_friends' },
          { name: '–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', value: 'selected' }
        ]
      },
      {
        type: 'input',
        name: 'caption',
        message: '–ü–æ–¥–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö –∏—Å—Ç–æ—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      },
      {
        type: 'input',
        name: 'mentionsFile',
        message: '–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      },
      {
        type: 'input',
        name: 'link',
        message: '–°—Å—ã–ª–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
      }
    ]);

    try {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
      const files = readdirSync(mediaFolder)
        .filter(file => {
          const ext = path.extname(file).toLowerCase();
          return ['.jpg', '.jpeg', '.png', '.mp4'].includes(ext);
        })
        .map(file => path.join(mediaFolder, file));

      if (files.length === 0) {
        console.log(chalk.yellow('‚ö†Ô∏è –í —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤'));
        return;
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
      const mentions = mentionsFile ? 
        await this.storyManager.loadMentionsList(mentionsFile) : [];

      // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
      const [hours, minutes] = startTime.split(':').map(Number);
      const startDate = new Date();
      startDate.setHours(hours, minutes, 0, 0);
      
      if (startDate < new Date()) {
        startDate.setDate(startDate.getDate() + 1);
      }

      console.log(chalk.blue('\nüìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:'));
      
      for (let i = 0; i < files.length; i++) {
        const publishDate = new Date(startDate.getTime() + i * interval * 60000);
        const delay = (publishDate.getTime() - Date.now()) / 1000;

        console.log(chalk.white(
          `${i + 1}. ${path.basename(files[i])} - ${publishDate.toLocaleString()}`
        ));

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        setTimeout(() => {
          this.storyManager.postStory({
            account,
            mediaPath: files[i],
            caption,
            mentions,
            link,
            privacy
          }).catch(err => {
            console.error(chalk.red(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ ${files[i]}:`, err.message));
          });
        }, delay * 1000);
      }

      console.log(chalk.green(`\n‚úÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ ${files.length} –ø—É–±–ª–∏–∫–∞—Ü–∏–π`));
      
    } catch (err) {
      console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', err.message));
    }
  }

  async mentionsMenu() {
    const { action } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:',
        choices: [
          { name: 'üìù –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫', value: 'create' },
          { name: 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ', value: 'view' },
          { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
        ]
      }
    ]);

    if (action === 'back') return;

    if (action === 'create') {
      const { filename } = await inquirer.prompt([
        {
          type: 'input',
          name: 'filename',
          message: '–ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:',
          default: 'mentions.txt'
        }
      ]);

      console.log(chalk.blue('–í–≤–µ–¥–∏—Ç–µ @username –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏.'));
      console.log(chalk.blue('–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É.'));

      const mentions = [];
      while (true) {
        const { username } = await inquirer.prompt([
          {
            type: 'input',
            name: 'username',
            message: 'Username:'
          }
        ]);

        if (!username) break;
        mentions.push(username);
      }

      try {
        const content = mentions.join('\n');
        writeFileSync(filename, content);
        console.log(chalk.green('‚úÖ –°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'));
      } catch (err) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:', err.message));
      }
    }

    if (action === 'view') {
      const files = readdirSync('.')
        .filter(file => file.endsWith('.txt'));

      if (files.length === 0) {
        console.log(chalk.yellow('‚ÑπÔ∏è –ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤'));
        return;
      }

      const { file } = await inquirer.prompt([
        {
          type: 'list',
          name: 'file',
          message: '–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª:',
          choices: files
        }
      ]);

      try {
        const content = readFileSync(file, 'utf8');
        console.log(chalk.blue('\n–°–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π:'));
        console.log(content);
      } catch (err) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞:', err.message));
      }
    }
  }

  async proxyMenu() {
    const { action } = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏:',
        choices: [
          { name: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∫—Å–∏', value: 'add' },
          { name: 'üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏', value: 'list' },
          { name: 'üîô –ù–∞–∑–∞–¥', value: 'back' }
        ]
      }
    ]);

    if (action === 'back') return;

    if (action === 'add') {
      const { type, host, port, username, password } = await inquirer.prompt([
        {
          type: 'list',
          name: 'type',
          message: '–¢–∏–ø –ø—Ä–æ–∫—Å–∏:',
          choices: [
            { name: 'SOCKS5', value: 'socks5' },
            { name: 'HTTP', value: 'http' },
            { name: 'HTTPS', value: 'https' }
          ]
        },
        {
          type: 'input',
          name: 'host',
          message: '–•–æ—Å—Ç:',
          validate: input => input.length > 0
        },
        {
          type: 'number',
          name: 'port',
          message: '–ü–æ—Ä—Ç:',
          validate: input => input > 0 && input < 65536
        },
        {
          type: 'input',
          name: 'username',
          message: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
        },
        {
          type: 'password',
          name: 'password',
          message: '–ü–∞—Ä–æ–ª—å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):'
        }
      ]);

      try {
        this.accountManager.addProxy({ type, host, port, username, password });
        console.log(chalk.green('‚úÖ –ü—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!'));
      } catch (err) {
        console.error(chalk.red('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏:', err.message));
      }
    }

    if (action === 'list') {
      const proxies = this.accountManager.getProxies();
      if (proxies.length === 0) {
        console.log(chalk.yellow('‚ÑπÔ∏è –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏'));
      } else {
        console.log(chalk.blue('\n–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏:'));
        proxies.forEach((proxy, i) => {
          console.log(chalk.white(
            `${i + 1}. ${proxy.type}://${proxy.host}:${proxy.port}`
          ));
        });
      }
    }
  }
}